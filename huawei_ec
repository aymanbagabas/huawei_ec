#!/bin/bash

# Copyright (C) 2019  Ayman Bagabas (ayman.bagabas@gmail.com)

declare -A pins=(
	#  name		pin(s)
	["batpro"]="0x43"
	["batthre"]="0xe4 0xe5"
	["fnlk"]="0xe6 0xe7"
)

declare -A desc=(
	#  name		desc
	["batpro"]=" battery protection available values: on,off"
	["batthre"]="battery threshold available values: [0-100] [0-100]"
	["fnlk"]="fn key lock available values: on,off"
)

_help() {
	cat <<EOF
$0 OPTION VALUE

OPTIONS:
	set
	get

VALUES:
EOF
	for i in "${!pins[@]}"; do
		echo "	$i - ${desc[$i]}";
	done
}

_error() {
	echo "wrong input!
	"
	_help
	exit 1
}

wait_read() {
	for i in {1..10000}; do
		if ! [ $((0x$(inb --hex $1) & 0x01)) -eq 0 ]; then
			break
		fi
		sleep 0.01
	done
	! [ $i -eq 10000 ]
}

wait_write() {
	for i in {1..10000}; do
		if [ $((0x$(inb --hex $1) & 0x02)) -eq 0 ]; then
			break
		fi
		sleep 0.01
	done
	! [ $i -eq 10000 ]
}

wait_read_ec() {
	wait_read 0x66
	return $?
}

wait_write_ec() {
	wait_write 0x66
	return $?
}

read_ec() {
	wait_write_ec && outb 0x66 0x80
	wait_write_ec && outb 0x62 $1
	wait_read_ec && res=$(inb 0x62)
	echo "REG[$1]==$(printf '0x%x' $res)" >&2
	return "$res"
}

write_ec() {
	read_ec $1
	echo "REG[$1]:=$2" >&2
	wait_write_ec && outb 0x66 0x81
	wait_write_ec && outb 0x62 $1
	wait_write_ec && outb 0x62 $2
	read_ec $1
}

# Check root
if [ $(id -u) -ne 0 ]; then
	echo "This script must be run as root"
	exit 1
fi

# Check necessary packages
if ! [ -x "$(command -v inb)" -a -x "$(command -v outb)" ]; then
	echo "ioport was not found!"
	echo "Please install ioport"
	exit 1
fi

case "$1" in
	"set")
		case "$2" in
			"batpro")
				if [ "$3" == "on" ]; then
					write_ec "${pins[$2]}" 0xc0
				elif [ "$3" == "off" ]; then
					write_ec "${pins[$2]}" 0x80
				else
					_error
				fi
				;;
			"batthre")
				if [ "$3" -ge 0 -a "$4" -le 100 ]; then
					IFS=' ' read -r -a val <<< "${pins[$2]}"
					write_ec "${val[0]}" "$(printf '0x%x' "$3")"
					write_ec "${val[1]}" "$(printf '0x%x' "$4")"
				fi
				;;
			"fnlk")
				IFS=' ' read -r -a val <<< "${pins[$2]}"
				read_ec "${val[0]}"
				v1=$(printf '0x%x' "$?")
				read_ec "${val[1]}"
				v2=$(printf '0x%x' "$?")
				if [ "$3" == "on" ]; then
					[ "$(($v1 & 0x01))" -eq 0 ] && write_ec "${val[0]}" "$(printf '0x%x' $(($v1 + 1)))"
					[ "$(($v2 & 0x01))" -eq 0 ] && write_ec "${val[1]}" "$(printf '0x%x' $(($v2 + 1)))"
				elif [ "$3" == "off" ]; then
					[ "$(($v1 & 0x01))" -eq 1 ] && write_ec "${val[0]}" "$(printf '0x%x' $(($v1 - 1)))"
					[ "$(($v2 & 0x01))" -eq 1 ] && write_ec "${val[1]}" "$(printf '0x%x' $(($v2 - 1)))"
				else
					_error
				fi
				;;
			*)
				write_ec "$2" "$3"
				;;
		esac
		;;
	"get")
		case "$2" in
			"batpro")
				read_ec "${pins[$2]}"
				res=$(printf '0x%x' "$?")
				if [ "$res" == "0xc0" ]; then
					echo "on"
				else
					echo "off"
				fi
				;;
			"batthre")
				IFS=' ' read -r -a val <<< "${pins[$2]}"
				for i in "${val[@]}"; do
					read_ec "$i"
					echo "$?"
				done
				;;
			"fnlk")
				IFS=' ' read -r -a val <<< "${pins[$2]}"
				for i in "${val[@]}"; do
					read_ec "$i"
					res=$(printf '0x%x' "$?")
					if [ "$(($res & 0x1))" -eq 1 ]; then
						echo "on"
					else
						echo off
					fi
				done
				;;
			*)
				read_ec "$2"
				;;
		esac
		;;
	*)
		_help
		;;
esac

exit 0
